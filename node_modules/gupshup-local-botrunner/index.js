const localServer = require('./lib/server');
const fs = require('fs');
const path = require('path');
const config = require("./config.js");
const pathToBotConfig = path.join(process.cwd(), '.botconfig');
let retryCount;
let smUrl = config.getSmUrl('prod');

function updateCallbackBot(botName, apikey, request, devid) {
    let ngrok = require('ngrok');
    ngrok.connect(process.env.PORT || 8081, function (err, url) {
        if (url) {
            console.log(`Initiating Local Server. NgRok Connect Successful.`);
            localServer.init();
            console.log(`Setting Up Callback URL => ${url}`);
            let callbackUrlSetOptions = {
                method: 'PUT',
                url: 'https://' + smUrl + '/sm/api/v1/bot/' + botName + '/environments/dev' + devid + '/callbackurl',
                headers: {
                    'cache-control': 'no-cache',
                    'apikey': apikey,
                    'content-type': 'application/x-www-form-urlencoded'
                },
                form: {url: encodeURI(url + '/botcallback')},
                timeout: 10000
            };
            console.log(`Callback URL Pushing to => ${callbackUrlSetOptions.url} with value ${callbackUrlSetOptions.form.url}`);
            request(callbackUrlSetOptions, function (error, response, body) {
                if (error) throw new Error(error);
                if (response.statusCode >= 300) {
                    console.error(`Error Occurred While setting up callback URL`);
                    console.log(`Response Status Code => ${response.statusCode}`);
                    console.log(`Response Status Code => ${response.statusMessage}`);
                } else {
                    console.log('Server Started Successfully. Please type proxy ' + botName + '$dev' + devid);
                }
            });
        } else {
            if (retryCount <= 5) {
                console.log('ngrok URL not found. Retrying ' + ++retryCount + 'time(s)');
                setTimeout(() => {
                    "use strict";
                    updateCallbackBot(botName, apikey, request, devid);
                }, retryCount * 1000);
            } else {
                console.error('Retried 5 times but failed to set the callback url. Please check whether you have something running on ' + (process.env.PORT || 8081));
                console.error('Exiting...');
                process.exit(0);
            }
        }
    });
}

fs.exists(pathToBotConfig, (exists) => {
    "use strict";
    if (exists) {

        let PropertiesReader = require('properties-reader');
        let properties = PropertiesReader(pathToBotConfig);
        let botName = properties.get('botName');
        let apikey = properties.get('apikey');
        let botDesc = properties.get('description');
        let devid = properties.get('devid');
        let toStartOnlyServer = Boolean(properties.get("toStartOnlyServer"));
        smUrl = config.getSmUrl(properties.get('env') || 'prod');


        if (toStartOnlyServer) {
            console.log(`Starting only LocalServer on Port => ${process.env.PORT || 8081}`);
            localServer.init();
        } else {
            if (!!!botDesc) {
                botDesc = "";
            }

            if (!devid) {
                console.error("DevId Not Found, Please Add devid=<your devid> in .botconfig file. Cannot Start Server");
                return;
            }


            /*
             1. TODO Create Bot
             2. TODO Start Ngrok on 8081
             3. TODO Set Callback
             */

            let request = require("request");

            let botCreateOptions = {
                method: 'PUT',
                url: 'https://' + smUrl + '/sm/api/v1/bot/' + botName + '/create',
                headers: {
                    'cache-control': 'no-cache',
                    apikey: apikey,
                    accept: 'application/json',
                    'content-type': 'application/x-www-form-urlencoded'
                },
                form: {
                    description: botDesc,
                    lang: 'node',
                },
                timeout: 10000
            };
            request(botCreateOptions, (error, response, body) => {
                if (error) throw new Error(error);
                if (response.statusCode >= 200 && response.statusCode < 300) {
                    let botKey = JSON.parse(body).botkey;
                    if (botKey) {
                        properties.set('botkey', botKey);
                        properties.set('created', true);
                        let newBotConfig = "";
                        properties.each((key, value) => {
                            newBotConfig = newBotConfig.concat(`${key}=${value}`).concat("\n");
                        });

                        fs.writeFile(pathToBotConfig, newBotConfig, 'utf8', (err) => {
                            if (err) throw err;
                            let enableIBC = {
                                method: 'POST',
                                url: 'https://' + smUrl + '/sm/api/v1/bot/' + botName + '/settings/enableIBC',
                                headers: {
                                    'content-type': 'application/x-www-form-urlencoded',
                                    'cache-control': 'no-cache',
                                    apikey: apikey,
                                },
                                form: {enableIBC: 'true'},
                                timeout: 10000
                            };
                            request(enableIBC, (error, response, body) => {
                                if (error) throw new Error(error);
                                if (response.statusCode >= 200 && response.statusCode < 300) {
                                    console.log(`IBC Enabled Successfully.`)
                                } else {
                                    console.error('Enable IBC Failed. Please Enable IBC From the DashBoard');
                                    console.log(`Status Code => ${response.statusCode}`);
                                    console.log(`Status Message => ${response.statusText}`);
                                }
                                retryCount = 0;
                                updateCallbackBot(botName, apikey, request, devid);
                            });
                        });
                    } else {
                        console.error(`BotKey not received at the time of bot creation. Halting the process`);
                        process.exit(0);
                    }
                } else {
                    retryCount = 0;
                    updateCallbackBot(botName, apikey, request, devid);
                }
            });
        }
    } else {
        localServer.init();
    }
});
