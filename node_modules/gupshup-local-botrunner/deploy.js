/**
 * Created by agnibha on 3/7/17.
 */
if (!require) {
  throw new Error(
    "This functionality needs Node JS to run. Please check if node js and require is installed."
  );
}
const os = require("os");
const fs = require("fs");
const path = require("path");
const ncp = require("ncp").ncp;
const rimraf = require("rimraf");
const zipFolder = require("zip-folder");
const chalk = require("chalk");
const config = require("./config.js");
const deployFolder = path.join(os.tmpdir(), "deployable");
const pathToBotConfig = path.join(process.cwd(), ".botconfig");
const log = console.log;

fs.exists(deployFolder, exists => {
  "use strict";
  log(chalk.green(`Refreshing folder ${deployFolder}`));
  if (exists) {
    rimraf(deployFolder, installFolders);
  } else {
    installFolders();
  }
});

function installFolders() {
  "use strict";
  log(chalk.green(`Refreshing done. Running pre deployment scripts.`));

  fs.mkdirSync(deployFolder, 0o744);

  ncp(process.cwd(), deployFolder, function () {
    log(
      chalk.green(`Copy successful at ${chalk.blue.underline(deployFolder)}`)
    );

    rimraf(path.join(deployFolder, "temp_db"), () => {
      fs.unlink(path.join(deployFolder, "npm_debug.log"), () => {
        let tempBotRunnerPath = path.join(
          deployFolder,
          "node_modules/gupshup-botrunner"
        );

        fs.exists(tempBotRunnerPath, exists => {
          if (!exists) {
            fs.mkdirSync(tempBotRunnerPath, 0o744);
          }

          ncp(
            path.join(deployFolder, "node_modules/gupshup-local-botrunner"),
            tempBotRunnerPath,
            () => {
              let zipFilePath = path.join(
                os.tmpdir(),
                `deployable_${new Date().getTime()}.zip`
              );

              fs.unlink(zipFilePath, () => {
                log(
                  chalk.green(
                    `Creating ZIP at path => ${chalk.blue.underline(
                      zipFilePath
                    )}`
                  )
                );

                zipFolder(deployFolder, zipFilePath, err => {
                  if (err) {
                    log(chalk.red(err.stack));
                    throw err;
                  } else {
                    log(
                      chalk.green(
                        `ZIP creation successful at ${chalk.blue.underline(
                          zipFilePath
                        )}`
                      )
                    );
                    log(chalk.green(`Starting the upload process`));

                    let request = require("request");
                    let PropertiesReader = require("properties-reader");

                    let properties = PropertiesReader(pathToBotConfig);
                    let smUrl = config.getSmUrl(properties.get('env') || 'prod');
                    let botName = properties.get("botName");
                    let apikey = properties.get("apikey");
                    let botuuid = properties.get("botkey");

                    let Spinner = require("cli-spinner").Spinner;

                    let spinner = new Spinner(
                      chalk.green("%s Please wait while we upload your code")
                    );
                    spinner.start();
                    let options = {
                      method: "POST",
                      url: `https://` + smUrl + `/sm/api/bot/${botName}/uploadBotCode`,
                      headers: {
                        "content-type": "multipart/form-data",
                        "cache-control": "no-cache",
                        apikey: apikey
                      }
                    };
                    let req = request(options, function (error, response, body) {
                      spinner.stop(true);
                      if (error) throw new Error(error);
                      if (response.statusCode >= 300) {
                        throw new Error(response.statusMessage);
                      } else {
                        log(
                          chalk.bold.green(
                            `Your bot has been successfully deployed. Type ${chalk.bold.underline.white(
                              `proxy ${botName}`
                            )} to check your bot in gupshup proxy bot`
                          )
                        );
                        log(chalk.red(`Removing ZIP Folder`));
                        fs.unlink(zipFilePath, err => {
                          if (err) {
                            log(
                              chalk.red(
                                `Deletion of ${zipFilePath} failed. Please manually delete the ZIP File.`
                              )
                            );
                          }
                          log(
                            chalk.red(
                              `ZIP File at ${zipFilePath} delete Successfully.`
                            )
                          );
                        });
                      }
                    });
                    let form = req.form();
                    form.append("botCode", fs.createReadStream(zipFilePath));
                  }
                });
              });
            }
          );
        });
      });
    });
  });
}
